package work_15_05_2025.homework_16_05_2025;

import work_12_05_2025.homework_13_05_2025.Operations;

import java.util.Scanner;

public class Homework {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Operations operations = new Operations();

       // Задания для закрепления
//        Объявление примитивных переменных:
//        Создайте программу, которая объявляет переменные всех 8 примитивных типов, присваивает им значения и выводит их на экран.
        boolean bo;
        bo = true;
        System.out.println("Переменная типа boolean = " + bo);
        byte b;
        b = 1;
        System.out.println("Переменная типа byte = " + b);
        short s;
        s = 2;
        System.out.println("Переменная типа short = " + s);
        int i;
        i = 3;
        System.out.println("Переменная типа int = " + i);
        long l;
        l = 40_000_000_000L;
        System.out.println("Переменная типа long = " + l);
        float f;
        f = 5.058f;
        System.out.println("Переменная типа float = " + f);
        double d;
        d = 6.25;
        System.out.println("Переменная типа double = " + d);
        char ch = '+';
        System.out.println("Переменная типа char = " + ch);

        System.out.println("------------------------------------------------------------------------------------ ");

//                Сравнение чисел:
//        Напишите программу, которая считывает с консоли два числа типа int и выводит результаты сравнений с помощью операторов >, <, == и !=.
//!-->  Мое решение такое, возможно я не так поняла задание, но у меня не получилось использовать все операторы сравнения, а только 2 шт:
        System.out.println("Введи первое число: ");
        int number1 = scanner.nextInt();
        System.out.println("Введи второе число: ");
        int number2 = scanner.nextInt();

        if (number1 != number2) {
            System.out.println("Первое число не равно второму");
            if (number1 < number2) {
                System.out.println("Первое число меньше второго");
            } else {
                System.out.println("Первое число больше второго");
            }
        }
            else {
            System.out.println("Первое число равно второму");
        }

        System.out.println("------------------------------------------------------------------------------------ ");

//        Работа с символами:
//        Создайте программу, в которой переменная типа char хранит символ. Соберите строку из нескольких символов (с помощью цикла) и выведите её.
        char symbol = ':';
        System.out.print("Строка символов: ");
        for (int j = 0; j < 5; j++) {
            System.out.print(symbol);
        }
        System.out.println(" ");
        System.out.println("------------------------------------------------------------------------------------ ");

//                Арифметические операции с вещественными числами:
//        Напишите программу, которая объявляет переменную типа double, выполняет над ней арифметические операции (сложение, вычитание, умножение, деление) и выводит результат с округлением до целого.
        double varDouble1 = 1.56;
        double varDouble2 = 10;

        System.out.println("Сумма, округленная до целого числа: " + Math.round(operations.getSum(varDouble1,varDouble2)));
        System.out.println("Разница, округленная до целого числа: " + Math.round(operations.getDiff(varDouble1,varDouble2)));
        System.out.println("Произведение, округленное до целого числа: " + Math.round(operations.getMulti(varDouble1,varDouble2)));
        System.out.println("Деление, округленное до целого числа: " + Math.round(operations.getDivision(varDouble1,varDouble2)));

        System.out.println("------------------------------------------------------------------------------------ ");

//                Сравнение строк:
//        Создайте две строки – одну через строковый литерал, другую через new String("Hello"). Сравните их с помощью оператора == и метода equals(),
//        выведите результаты и поясните разницу.
        String str1 = "Привет, Ритулик!";
        String str2 = new String("Привет, Ритулик!");

        if (str1 == str2) {
            System.out.println("Строковые переменные одинаковы");
        } else {
            System.out.println("Строковые переменные разные");
        }

        //System.out.println(str1.equals(str2)); // значение true проверка для себя.

      String result = (str1.equals(str2)) ? "Строковые переменные одинаковы" : "Строковые переменные разные";
        System.out.println(result);

        System.out.println("Значения сравнения через == и equals разные, потому что == сравнивает ссылки на разные объекты (str1 и str2, хотя значения у них равны) в памяти компьютера и возвращает результат, а метод equals проверяет, одинаковы ли значения объектов, а не являются ли они одним и тем же объектом в памяти.");
        System.out.println("Вывод таков: если нужно сравнить ссылки на объекты, используем ==. Если требуется сравнить значения объектов, используйем equals(), но при этом учитываем, что поведение этого метода может отличаться в разных классах.");


        System.out.println("------------------------------------------------------------------------------------ ");
//
//        Работа с массивом целых чисел:
//        Объявите массив int[] из 5 элементов, заполните его значениями и выведите на экран первый и последний элемент массива.
        int[] numbersMass = {1,2,3,4,5};

       System.out.println(numbersMass[0] + ", " + numbersMass[numbersMass.length-1]);

       System.out.println("------------------------------------------------------------------------------------ ");

//                Массив строк:
//        Создайте массив String[], содержащий названия дней недели, и выведите длину каждого элемента (количество символов).
        String[] strArray = {"Понедельник","Вторник","Среда","Четверг","Пятница","Суббота","Воскресенье"};
                for (int j = 0; j < strArray.length; j++) {
            System.out.println("Длинна " + j + " элемента массива strArray равна " + strArray[j].length() );
        }

        System.out.println("------------------------------------------------------------------------------------ ");

//        Формирование строки из массива символов:
//        Объявите массив char[], заполните его символами и с помощью цикла сформируйте строку, которую затем выведите на экран.
        char[] charArray = {':',')',')',')'};
        for (int k = 0; k < charArray.length; k++) {
            System.out.print(charArray[k]);
        }

        System.out.println(" ");
        System.out.println("------------------------------------------------------------------------------------ ");
//
//        Передача по значению и по ссылке:
//        Напишите программу, демонстрирующую, что при присваивании примитивной переменной копируется само значение, а при присваивании ссылочного типа копируется ссылка.
//        Измените значение примитива после копирования и покажите, что копия не меняется; затем измените содержимое объекта через одну переменную и выведите значение через другую переменную.
//!-->  Не очень поняла как выполнить задание , мое решение такое:
        int primitiv1 = 13;
        int primitiv2 = primitiv1;

        String ssylka1 = "Кукусики";
        String ssylka2 = ssylka1;

        System.out.println(primitiv2);
        System.out.println(ssylka2);

        System.out.println("------------------------------------------------------------------------------------ ");
//
//                Вычисление выражения с переменными разных типов:
//        Объявите переменные разных примитивных типов, вычислите сложное арифметическое выражение с использованием нескольких операторов и выведите результат.
        int prim1 = 10;
        short prim2 = 5;
        double prim3 = 7;

        double a = (prim1 + prim2 * prim3) / prim1;
        System.out.println("Результат выражения: " + a);

        double resultat = (prim1 * prim2 + prim3) / prim1;
        System.out.println("Результат выражения: " + resultat);

        System.out.println("------------------------------------------------------------------------------------ ");

//        Задания для закрепления
//        Локальные переменные:
//        Создайте метод, в котором объявляется локальная переменная (например, int count = 5) и выведите её значение внутри метода. Попробуйте обратиться к ней за пределами метода и объясните, почему это невозможно.

        operations.printNubers(); // локальная переменная count имеет обл видимости внутри {}.

        System.out.println("------------------------------------------------------------------------------------ ");

//        Переменные экземпляра:
//        Создайте класс Person с полями name и age. Создайте несколько объектов этого класса с разными значениями и выведите их данные на экран.
        Human rita = new Human("Рита",33);
        Human iia = new Human("Ия",32);
        System.out.println("Имя: " + rita.name + " и " + "Возраст: " + rita.age);
        System.out.println("Имя: " + iia.name + " и " + "Возраст: " + iia.age);

        System.out.println("------------------------------------------------------------------------------------ ");
//
//        Статическая переменная:
//        Напишите класс с статической переменной-счётчиком. При создании каждого нового объекта увеличивайте значение счётчика и выводите текущее количество объектов.
        Counter counter1 = new Counter();
        Counter counter2 = new Counter();
        Counter counter3 = new Counter();

        counter1.printStatic();
        counter2.printStatic();
        counter3.printStatic();

        System.out.println("------------------------------------------------------------------------------------ ");
//
//        Затенение переменных:
//        В классе объявите переменную экземпляра name и в методе объявите локальную переменную с тем же именем. Продемонстрируйте, как с помощью this можно обратиться к экземплярной переменной.
        counter1.printCounterName();

        System.out.println("------------------------------------------------------------------------------------ ");
//
//                Блочная область видимости:
//        Напишите программу, в которой переменная объявлена внутри блока {}. Попробуйте обратиться к этой переменной за пределами блока и объясните возникшую ошибку.
        //обратиться не получится, поскольку переменная "видна" только внутри {}. Пример переменной int num в методе printCounterName().

//        Переменные в цикле:
//        Создайте программу, где в цикле for объявляется переменная-счётчик, и продемонстрируйте, что после завершения цикла эта переменная недоступна.

        for (int m = 0; m < 4; m++) { //переменная i - счетчик, за пределами {} недоступна.
            System.out.println(m);
        }

        System.out.println("------------------------------------------------------------------------------------ ");
//
//        Переменные в разных блоках:
//        Создайте метод, в котором переменные объявлены внутри блока if и вне его, и выведите их значения, чтобы показать разницу в области видимости.
        operations.printVar(8,2);
        operations.printVar(1,9);

        System.out.println("------------------------------------------------------------------------------------ ");
//
//                Массив как переменная экземпляра:
//        Создайте класс, содержащий массив (например, массив целых чисел). Реализуйте метод, который изменяет значения элементов массива, и продемонстрируйте, что изменения видны во всех методах класса.
//!-->  Не очень поняла как выполнить задание (думала нужен setter но не смогла его поженить), мое решение такое:
        counter1.printSetNumbersInt();

        System.out.println("------------------------------------------------------------------------------------ ");
//
//        Статический счетчик объектов:
//        Напишите класс, где статическая переменная используется для подсчёта созданных объектов. При создании каждого объекта увеличивайте этот счётчик и выводите его значение.
        Counter counter4 = new Counter();
        Counter counter5 = new Counter();
        Counter counter6 = new Counter();

        counter4.printStatic2();
        counter5.printStatic2();
        counter6.printStatic2();


        System.out.println("------------------------------------------------------------------------------------ ");
//
//                Смешанное использование областей видимости:
//        Создайте класс с несколькими методами, в которых используются локальные, экземплярные и статические переменные. Продемонстрируйте порядок инициализации и корректное обращение к переменным.
        // в принципе класс Counter  подходит под описание, там есть статичная переменная STVAR, несколько локальных num и i и несколько переменных экземпляра notStVar и counterName.


        System.out.println("------------------------------------------------------------------------------------ ");





    }

}
